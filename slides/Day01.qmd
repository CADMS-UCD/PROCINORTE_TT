---
title: "R syntax"
author: "Pablo Gomez"
format: 
  revealjs:
    theme: [dark, custom.scss]
    footer: "[Workshop homepage](https://cadms-ucd.github.io/PROCINORTE_TT/)"
editor: source
title-slide-attributes:
    data-background-image: img/bg_title.png
---

# Some programming concepts {background-image="img/bg_title.png"}

## [Comments]{style="color:black;"} {background-color="black" background-image="img/bg_2.png"}

COMMENT AS MUCH AS POSSIBLE!

```{r echo = T, eval = F}
# This is a comment in R it will be only for the user
This is not a comment and will cause an error
```

What is the difference between line 1 and 2?

. . .

YES! the `#` character will make everything after it a comment in that line of code

. . .

```{r echo = T, eval = F}
10 + 10 # Everything after will be a comment
7 + 4
```

::: notes
Comments are probably the most important feature of programming languages, commenting your code is not only for you (and feature you), it's also to explain other people what you did and make it easier for them to replicate
:::

## [Operators]{style="color:black;"} {background-color="black" background-image="img/bg_2.png"}

Operators are characters with a specific function in R for example

```{r echo = T}
3 + 3 # this is a sum operator
3 - 2 # this is a subtract operator
4 * 4 # This is a multiplication
```

. . .

Later we will see other kind of operators, but... DONT STRESS about learning everything.

## [Objects]{style="color:black;"} {background-color="black" background-image="img/bg_2.png"}

Objects in R are containers for information, we can create objects with any names we want that start with a letter

```{r echo = T}
myNumber <- 4
myResult <- 4 * 5
```

::: notes
Does anyone notice what operators are we using in those lines of code?
:::

## [Boolean logic]{style="color:black;"} {background-color="black" background-image="img/bg_2.png"}

```{r echo = T}
1 == 1 # is it equal?
1 != 1 # is it NOT equal?
1 %in% c(1, 2, 3) # is the number contained in the sequence?
```

. . .

Notice that we are using operators to make the comparisons

## [Functions]{style="color:black;"} {background-color="black" background-image="img/bg_2.png"}

Functions are a special kind of object. Functions are objects that require arguments, the arguments needs to be inside parentheses.

```{r echo = T}
# create a sequence of numbers
seq(
  from = 0, # Starting number
  to = 80, # Ending number
  by = 20 # number increment of the sequence
) 
```

. . .

Notice that the arguments are named in the function, the arguments in the function `seq()` function are `from`, `to`, `by`.

. . .

We can create our own functions, which we will talk more about in the labs

## [Storing multiple elements]{style="color:black;"} {background-color="black" background-image="img/bg_2.png"}

Using the `c()` function

```{r echo = T}
x <- c(1, 3, 5) # using the c() function
x
```

. . .

Using the `list()` function

```{r echo = T}
y <- list(1, 3, 5) # using the list() function
y
```

## [Test time!]{style="color:black;"} {background-color="black" background-image="img/bg_2.png"}

```{r echo=T}
x <- seq(from = 5, to = 23, length.out = 10) # create a sequence of numbers
y <- seq(from = 0.1, to = 0.78, length.out = 10) # Create another sequence
mean(x*y) # Get the mean of the multiplication
```

. . .

::: columns
::: {.column with="30%"}
Objects:\
- x\
- y
:::

::: {.column with="30%"}
Operators:\
- `*`\
- `<-`\
- `=`
:::
:::

. . .

::: columns
::: {.column with="30%"}
Functions:\
- `seq()`\
- `mean()`
:::

::: {.column with="30%"}
Arguments:\
- `from`\
- `to`\
- `lengt.out`
:::
:::
